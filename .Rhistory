entity = "Observations",
query_option = "$filter=(
ResourceID eq 'CPCOV10'
)
",
service_api_key = "3727dfa9d9f44874a510f426cd115b1c"))
Observations_CPCOV11<-  Filter(function(x)!all(is.na(x)),
get_odata(
service = "https://api.stats.govt.nz/opendata/v1",
endpoint = "Covid-19Indicators",
entity = "Observations",
query_option = "$filter=(
ResourceID eq 'CPCOV11'
)
",
service_api_key = "3727dfa9d9f44874a510f426cd115b1c"))
#Change Period to Date variable
library(lubridate)
library(DT)
library(tidyverse)
Observations_CPCOV10$Period<-as.Date(Observations_CPCOV10$Period, format="%Y-%m-%d")
Observations_CPCOV11$Period<-as.Date(Observations_CPCOV11$Period, format="%Y-%m-%d")
Observations_CPCOV10$Period_Num<-as.numeric(Observations_CPCOV10$Period)
Observations_CPCOV11$Period_Num<-as.numeric(Observations_CPCOV11$Period)
library(ggplot2)
ggplot(Observations_CPCOV10, aes(x=Period, y = Value, group=Label1, colour=Label1)) +
geom_line() +
geom_point(size = 1)+
ggtitle("Cumulative vaccinations")+
xlab("Week ending") +
ylab("Number of vaccinations administered")+
labs(fill = "1")+
theme(legend.position="top")
Observations_CPCOV10
summary(Observations_CPCOV10)
library(visdat)
library(ggplot2)
vis_dat(Observations_CPCOV10) + ggtitle("Missing Value Distribution")
coef <- 1.5
limits <- boxplot.stats(x = Observations_CPCOV10$Value, coef = coef)$stats
Observations_CPCOV10$label <- ifelse(Observations_CPCOV10$Value < limits[1] | Observations_CPCOV10$Value > limits[5], rownames(Observations_CPCOV10), NA)
ggplot(data = Observations_CPCOV10, aes(x=Period, y=Value)) + geom_boxplot(aes(fill=Label1), coef = coef, outlier.colour = "red")+
labs(title = paste("Uni-variable boxplots at IQR multiplier of", coef))+
theme(axis.title.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank())
vaccin_adm<-Observations_CPCOV10[which(Observations_CPCOV10$Label1=="Cumulative vaccinations administered"),] #separate Cumulative vaccinations administered
d<-1:(nrow(vaccin_adm)*0.8)
train<-vaccin_adm[d,]
test<-vaccin_adm[-d,]
#order by date
train<-train[order(train$Period),]
test<-test[order(test$Period),]
library(e1071)
library(Metrics)
#train with hyperparameter tuning
#tuneResultsvm <- tune(svm, Value ~ Period,  data = train, kernel = "polynomial",
#              ranges = list(gamma=2^(-1:1),degree = 2, epsilon = seq(0,5,0.1), cost = 2^(seq(0.5,10,.5)), coef0 = c(0.1, 1, 10)))
tuneResultsvm <- svm(Value ~ Period,  data = train, kernel = "polynomial")
summary(tuneResultsvm)
summary(tuneResultsvm$best.model)
#best model selection
tunedVals <-tuneResultsvm$best.model
#best parameters selection
tunePar<-tuneResultsvm$best.parameters
gammaBest<-tunePar$gamma
epsilonBest<-tunePar$epsilon
costBest<-tunePar$cost
#testing using the best model
predictYsvm <- predict(tuneResultsvm, test)
tuneResultsvm <- tune(svm, Value ~ Period,  data = train, kernel = "polynomial",
ranges = list(gamma=2^(-1:1),degree = 2, epsilon = seq(0,5,0.1), cost = 2^(seq(0.5,10,.5)), coef0 = c(0.1, 1, 10)))
library(e1071)
library(Metrics)
#train with hyperparameter tuning
#tuneResultsvm <- tune(svm, Value ~ Period,  data = train, kernel = "polynomial",
#              ranges = list(gamma=2^(-1:1),degree = 2, epsilon = seq(0,5,0.1), cost = 2^(seq(0.5,10,.5)), coef0 = c(0.1, 1, 10)))
tuneResultsvm <- svm(Value ~ Period,  data = train, kernel = "polynomial")
summary(tuneResultsvm)
summary(tuneResultsvm$best.model)
#best model selection
tunedVals <-tuneResultsvm$best.model
#best parameters selection
tunePar<-tuneResultsvm$best.parameters
gammaBest<-tunePar$gamma
epsilonBest<-tunePar$epsilon
costBest<-tunePar$cost
#testing using the best model
predictYsvm <- predict(tuneResultsvm, test)
library(e1071)
library(Metrics)
#train with hyperparameter tuning
#tuneResultsvm <- tune(svm, Value ~ Period,  data = train, kernel = "polynomial",
#              ranges = list(gamma=2^(-1:1),degree = 2, epsilon = seq(0,5,0.1), cost = 2^(seq(0.5,10,.5)), coef0 = c(0.1, 1, 10)))
tuneResultsvm <- svm(Value ~ Period,  data = train, kernel = "polynomial")
summary(tuneResultsvm)
summary(tuneResultsvm$best.model)
#best model selection
tunedVals <-tuneResultsvm$best.model
#best parameters selection
tunePar<-tuneResultsvm$best.parameters
gammaBest<-tunePar$gamma
epsilonBest<-tunePar$epsilon
costBest<-tunePar$cost
#testing using the best model
predictYsvm <- predict(tuneResultsvm, test)
source("get-opendata-catalogue-fun.R")
Catalogue <- get_odata_catalogue(
service="https://api.stats.govt.nz/opendata/v1",
endpoint="data.json",
service_api_key = "3727dfa9d9f44874a510f426cd115b1c"
)
source("get-odata-fun.R")
Observations_CPCOV10<-  Filter(function(x)!all(is.na(x)),
get_odata(
service = "https://api.stats.govt.nz/opendata/v1",
endpoint = "Covid-19Indicators",
entity = "Observations",
query_option = "$filter=(
ResourceID eq 'CPCOV10'
)
",
service_api_key = "3727dfa9d9f44874a510f426cd115b1c"))
Observations_CPCOV11<-  Filter(function(x)!all(is.na(x)),
get_odata(
service = "https://api.stats.govt.nz/opendata/v1",
endpoint = "Covid-19Indicators",
entity = "Observations",
query_option = "$filter=(
ResourceID eq 'CPCOV11'
)
",
service_api_key = "3727dfa9d9f44874a510f426cd115b1c"))
#Change Period to Date variable
library(lubridate)
library(DT)
library(tidyverse)
Observations_CPCOV10$Period<-as.Date(Observations_CPCOV10$Period, format="%Y-%m-%d")
Observations_CPCOV11$Period<-as.Date(Observations_CPCOV11$Period, format="%Y-%m-%d")
Observations_CPCOV10$Period_Num<-as.numeric(Observations_CPCOV10$Period)
Observations_CPCOV11$Period_Num<-as.numeric(Observations_CPCOV11$Period)
library(ggplot2)
ggplot(Observations_CPCOV10, aes(x=Period, y = Value, group=Label1, colour=Label1)) +
geom_line() +
geom_point(size = 1)+
ggtitle("Cumulative vaccinations")+
xlab("Week ending") +
ylab("Number of vaccinations administered")+
labs(fill = "1")+
theme(legend.position="top")
Observations_CPCOV10
summary(Observations_CPCOV10)
library(visdat)
library(ggplot2)
vis_dat(Observations_CPCOV10) + ggtitle("Missing Value Distribution")
coef <- 1.5
limits1 <- boxplot.stats(x = Observations_CPCOV10$Value, coef = coef)$stats
Observations_CPCOV10$label <- ifelse(Observations_CPCOV10$Value < limits1[1] | Observations_CPCOV10$Value > limits1[5], rownames(Observations_CPCOV10), NA)
ggplot(data = Observations_CPCOV10, aes(x=Period, y=Value)) + geom_boxplot(aes(fill=Label1), coef = coef, outlier.colour = "red")+
labs(title = paste("Uni-variable boxplots at IQR multiplier of", coef))+
theme(axis.title.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank())
vaccin_adm<-Observations_CPCOV10[which(Observations_CPCOV10$Label1=="Cumulative vaccinations administered"),] #separate Cumulative vaccinations administered
d<-1:(nrow(vaccin_adm)*0.8)
train<-vaccin_adm[d,]
test<-vaccin_adm[-d,]
#order by date
train<-train[order(train$Period),]
test<-test[order(test$Period),]
library(e1071)
library(Metrics)
tuneResultsvm <- tune(svm, Value ~ Period,  data = train, kernel = "polynomial",
ranges = list(gamma=2^(-1:1),degree = 2, epsilon = seq(0,5,0.1), cost = 2^(seq(0.5,10,.5)), coef0 = c(0.1, 1, 10)))
tuneResultsvm <- svm(Value ~ Period,  data = train, kernel = "polynomial")
source("get-opendata-catalogue-fun.R")
Catalogue <- get_odata_catalogue(
service="https://api.stats.govt.nz/opendata/v1",
endpoint="data.json",
service_api_key = "3727dfa9d9f44874a510f426cd115b1c"
)
source("get-odata-fun.R")
Observations_CPCOV10<-  Filter(function(x)!all(is.na(x)),
get_odata(
service = "https://api.stats.govt.nz/opendata/v1",
endpoint = "Covid-19Indicators",
entity = "Observations",
query_option = "$filter=(
ResourceID eq 'CPCOV10'
)
",
service_api_key = "3727dfa9d9f44874a510f426cd115b1c"))
Observations_CPCOV11<-  Filter(function(x)!all(is.na(x)),
get_odata(
service = "https://api.stats.govt.nz/opendata/v1",
endpoint = "Covid-19Indicators",
entity = "Observations",
query_option = "$filter=(
ResourceID eq 'CPCOV11'
)
",
service_api_key = "3727dfa9d9f44874a510f426cd115b1c"))
#Change Period to Date variable
library(lubridate)
library(DT)
library(tidyverse)
Observations_CPCOV10$Period<-as.Date(Observations_CPCOV10$Period, format="%Y-%m-%d")
Observations_CPCOV11$Period<-as.Date(Observations_CPCOV11$Period, format="%Y-%m-%d")
Observations_CPCOV10$Period_Num<-as.numeric(Observations_CPCOV10$Period)
Observations_CPCOV11$Period_Num<-as.numeric(Observations_CPCOV11$Period)
library(ggplot2)
ggplot(Observations_CPCOV10, aes(x=Period, y = Value, group=Label1, colour=Label1)) +
geom_line() +
geom_point(size = 1)+
ggtitle("Cumulative vaccinations")+
xlab("Week ending") +
ylab("Number of vaccinations administered")+
labs(fill = "1")+
theme(legend.position="top")
Observations_CPCOV10
summary(Observations_CPCOV10)
library(visdat)
library(ggplot2)
vis_dat(Observations_CPCOV10) + ggtitle("Missing Value Distribution")
vaccin_adm<-Observations_CPCOV10[which(Observations_CPCOV10$Label1=="Cumulative vaccinations administered"),] #separate Cumulative vaccinations administered
d<-1:(nrow(vaccin_adm)*0.8)
train<-vaccin_adm[d,]
test<-vaccin_adm[-d,]
#order by date
train<-train[order(train$Period),]
test<-test[order(test$Period),]
library(e1071)
library(Metrics)
#train with hyperparameter tuning
tuneResultsvm <- tune(svm, Value ~ Period,  data = train, kernel = "polynomial",
ranges = list(gamma=2^(-1:1), epsilon = seq(0,1,0.1), cost = 2^(seq(0.5,10,.5))))
#tuneResultsvm <- svm(Value ~ Period,  data = train, kernel = "polynomial")
summary(tuneResultsvm)
summary(tuneResultsvm$best.model)
#best model selection
tunedVals <-tuneResultsvm$best.model
#best parameters selection
tunePar<-tuneResultsvm$best.parameters
gammaBest<-tunePar$gamma
epsilonBest<-tunePar$epsilon
costBest<-tunePar$cost
#testing using the best model
predictYsvm <- predict(tuneResultsvm, test)
predictYsvm <- predict(tunedVals, test)
coef1 <- 1.5
limits1 <- boxplot.stats(x = Observations_CPCOV10$Value, coef1 = coef1)$stats
coef1 <- 1.5
limits1 <- boxplot.stats(x = Observations_CPCOV10$Value, coef = coef1)$stats
Observations_CPCOV10$label <- ifelse(Observations_CPCOV10$Value < limits1[1] | Observations_CPCOV10$Value > limits1[5], rownames(Observations_CPCOV10), NA)
ggplot(data = Observations_CPCOV10, aes(x=Period, y=Value)) + geom_boxplot(aes(fill=Label1), coef = coef, outlier.colour = "red")+
labs(title = paste("Uni-variable boxplots at IQR multiplier of", coef1))+
theme(axis.title.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank())
coef1 <- 1.5
limits1 <- boxplot.stats(x = Observations_CPCOV10$Value, coef = coef1)$stats
Observations_CPCOV10$label <- ifelse(Observations_CPCOV10$Value < limits1[1] | Observations_CPCOV10$Value > limits1[5], rownames(Observations_CPCOV10), NA)
ggplot(data = Observations_CPCOV10, aes(x=Period, y=Value)) + geom_boxplot(aes(fill=Label1), coef = coef, outlier.colour = "red")+
labs(title = paste("Uni-variable boxplots at IQR multiplier of", coef1))+
theme(axis.title.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank())
coef1 <- 1.5
limits1 <- boxplot.stats(x = Observations_CPCOV10$Value, coef = coef1)$stats
Observations_CPCOV10$label <- ifelse(Observations_CPCOV10$Value < limits1[1] | Observations_CPCOV10$Value > limits1[5], rownames(Observations_CPCOV10), NA)
ggplot(data = Observations_CPCOV10, aes(x=Period, y=Value)) + geom_boxplot(aes(fill=Label1), coef = coef1, outlier.colour = "red")+
labs(title = paste("Uni-variable boxplots at IQR multiplier of", coef1))+
theme(axis.title.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank())
library(e1071)
library(Metrics)
#train with hyperparameter tuning
tuneResultsvm <- tune(svm, Value ~ Period,  data = train, kernel = "polynomial",
ranges = list(gamma=2^(-1:1), epsilon = seq(0,1,0.1), cost = 2^(seq(0.5,10,.5))))
#tuneResultsvm <- svm(Value ~ Period,  data = train, kernel = "polynomial")
summary(tuneResultsvm)
summary(tuneResultsvm$best.model)
#best model selection
tunedVals <-tuneResultsvm$best.model
#best parameters selection
tunePar<-tuneResultsvm$best.parameters
gammaBest<-tunePar$gamma
epsilonBest<-tunePar$epsilon
costBest<-tunePar$cost
#testing using the best model
predictYsvm <- predict(tunedVals, test)
summary(tuneResultsvm$best.model)
#best model selection
tunedVals <-tuneResultsvm$best.model
#best parameters selection
tunePar<-tuneResultsvm$best.parameters
gammaBest<-tunePar$gamma
epsilonBest<-tunePar$epsilon
costBest<-tunePar$cost
#testing using the best model
predictYsvm <- predict(tunedVals, test)
library(Metrics)
#errors
RMSE_svm<-rmse(test$Value, predictYsvm)
MAE_svm<-mae(test$Value, predictYsvm)
RSE_svm<-1-rse(test$Value, predictYsvm)
#creating error table
Measurement<-c("RMSE", "R-squared", "MAE")
err_Value<-c(RMSE_svm, RSE_svm, MAE_svm)
employ.data <- data.frame(Measurement, err_Value)
employ.data
library(ggplot2)
ggplot(test, aes(x=Period, y = Value, group=Label1, colour=Label1)) +
geom_line() +
geom_point(aes(x=Period, y=predictYsvm),colour='blue')+
ggtitle("Cumulative vaccinations administered vs predicted - SVM")+
xlab("Week ending") +
ylab("Number of vaccinations administered")+
labs(fill = "1")+
theme(legend.position="top")
library(ggplot2)
ggplot(test, aes(x=Period, y = Value, group=Label1, colour=Label1)) +
geom_line() +
geom_point(aes(x=test$Period, y=predictYsvm),colour='blue')+
ggtitle("Cumulative vaccinations administered vs predicted - SVM")+
xlab("Week ending") +
ylab("Number of vaccinations administered")+
labs(fill = "1")+
theme(legend.position="top")
d_svm_test <- data.frame(test$Value, predictYsvm)
colnames(d_svm_test) <- c("obs", "pred")
range <- range(c(d_svm_test$obs, d_svm_test$pred), na.rm = TRUE)
plot(d_svm_test, xlim = range, ylim = range, main = "Predicted versus Observed for test data")
abline(a = 0, b = 1, col = c("blue"), lty = c(2), lwd = c(3))
d_svm <- data.frame(train$Value, tuneResultsvm$best.model$fitted)
colnames(d_svm) <- c("obs", "pred")
d_svm$residuals <- tuneResultsvm$best.model$residuals
limits <- boxplot.stats(x = d_svm$residuals)$stats
label <- ifelse(d_svm$residuals < limits[1] | d_svm$residuals > limits[5], rownames(d_svm), NA)
ggplot(d_svm, mapping = aes(y = residuals, x = 0, label = label)) +
geom_boxplot(orientation = "vertical") +
labs(title = "Train-Residual Boxplot - SVM") +
theme(axis.title.x = element_blank(), axis.text.x = element_blank(), axis.ticks.x = element_blank())
gc()
source("get-opendata-catalogue-fun.R")
Catalogue <- get_odata_catalogue(
service="https://api.stats.govt.nz/opendata/v1",
endpoint="data.json",
service_api_key = "3727dfa9d9f44874a510f426cd115b1c"
)
source("get-odata-fun.R")
Observations_CPCOV10<-  Filter(function(x)!all(is.na(x)),
get_odata(
service = "https://api.stats.govt.nz/opendata/v1",
endpoint = "Covid-19Indicators",
entity = "Observations",
query_option = "$filter=(
ResourceID eq 'CPCOV10'
)
",
service_api_key = "3727dfa9d9f44874a510f426cd115b1c"))
Observations_CPCOV11<-  Filter(function(x)!all(is.na(x)),
get_odata(
service = "https://api.stats.govt.nz/opendata/v1",
endpoint = "Covid-19Indicators",
entity = "Observations",
query_option = "$filter=(
ResourceID eq 'CPCOV11'
)
",
service_api_key = "3727dfa9d9f44874a510f426cd115b1c"))
#Change Period to Date variable
library(lubridate)
library(DT)
library(tidyverse)
Observations_CPCOV10$Period<-as.Date(Observations_CPCOV10$Period, format="%Y-%m-%d")
Observations_CPCOV11$Period<-as.Date(Observations_CPCOV11$Period, format="%Y-%m-%d")
Observations_CPCOV10$Period_Num<-as.numeric(Observations_CPCOV10$Period)
Observations_CPCOV11$Period_Num<-as.numeric(Observations_CPCOV11$Period)
library(ggplot2)
ggplot(Observations_CPCOV10, aes(x=Period, y = Value, group=Label1, colour=Label1)) +
geom_line() +
geom_point(size = 1)+
ggtitle("Cumulative vaccinations")+
xlab("Week ending") +
ylab("Number of vaccinations administered")+
labs(fill = "1")+
theme(legend.position="top")
Observations_CPCOV10
summary(Observations_CPCOV10)
library(visdat)
library(ggplot2)
vis_dat(Observations_CPCOV10) + ggtitle("Missing Value Distribution")
coef1 <- 1.5
limits1 <- boxplot.stats(x = Observations_CPCOV10$Value, coef = coef1)$stats
Observations_CPCOV10$label <- ifelse(Observations_CPCOV10$Value < limits1[1] | Observations_CPCOV10$Value > limits1[5], rownames(Observations_CPCOV10), NA)
ggplot(data = Observations_CPCOV10, aes(x=Period, y=Value)) + geom_boxplot(aes(fill=Label1), coef = coef1, outlier.colour = "red")+
labs(title = paste("Uni-variable boxplots at IQR multiplier of", coef1))+
theme(axis.title.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank())
vaccin_adm<-Observations_CPCOV10[which(Observations_CPCOV10$Label1=="Cumulative vaccinations administered"),] #separate Cumulative vaccinations administered
d<-1:(nrow(vaccin_adm)*0.8)
train<-vaccin_adm[d,]
test<-vaccin_adm[-d,]
#order by date
train<-train[order(train$Period),]
test<-test[order(test$Period),]
library(e1071)
library(Metrics)
#train with hyperparameter tuning
tuneResultsvm <- tune(svm, Value ~ Period,  data = train, kernel = "polynomial",
ranges = list(gamma=2^(-1:1), epsilon = seq(0,1,0.1), cost = 2^(seq(0.5,10,.5))))
#tuneResultsvm <- svm(Value ~ Period,  data = train, kernel = "polynomial")
summary(tuneResultsvm$best.model)
#best model selection
tunedVals <-tuneResultsvm$best.model
#best parameters selection
tunePar<-tuneResultsvm$best.parameters
gammaBest<-tunePar$gamma
epsilonBest<-tunePar$epsilon
costBest<-tunePar$cost
#testing using the best model
predictYsvm <- predict(tunedVals, test)
source("get-opendata-catalogue-fun.R")
Catalogue <- get_odata_catalogue(
service="https://api.stats.govt.nz/opendata/v1",
endpoint="data.json",
service_api_key = "3727dfa9d9f44874a510f426cd115b1c"
)
source("get-odata-fun.R")
Observations_CPCOV10<-  Filter(function(x)!all(is.na(x)),
get_odata(
service = "https://api.stats.govt.nz/opendata/v1",
endpoint = "Covid-19Indicators",
entity = "Observations",
query_option = "$filter=(
ResourceID eq 'CPCOV10'
)
",
service_api_key = "3727dfa9d9f44874a510f426cd115b1c"))
Observations_CPCOV11<-  Filter(function(x)!all(is.na(x)),
get_odata(
service = "https://api.stats.govt.nz/opendata/v1",
endpoint = "Covid-19Indicators",
entity = "Observations",
query_option = "$filter=(
ResourceID eq 'CPCOV11'
)
",
service_api_key = "3727dfa9d9f44874a510f426cd115b1c"))
#Change Period to Date variable
library(lubridate)
library(DT)
library(tidyverse)
Observations_CPCOV10$Period<-as.Date(Observations_CPCOV10$Period, format="%Y-%m-%d")
Observations_CPCOV11$Period<-as.Date(Observations_CPCOV11$Period, format="%Y-%m-%d")
Observations_CPCOV10$Period_Num<-as.numeric(Observations_CPCOV10$Period)
Observations_CPCOV11$Period_Num<-as.numeric(Observations_CPCOV11$Period)
library(ggplot2)
ggplot(Observations_CPCOV10, aes(x=Period, y = Value, group=Label1, colour=Label1)) +
geom_line() +
geom_point(size = 1)+
ggtitle("Cumulative vaccinations")+
xlab("Week ending") +
ylab("Number of vaccinations administered")+
labs(fill = "1")+
theme(legend.position="top")
Observations_CPCOV10
summary(Observations_CPCOV10)
library(visdat)
library(ggplot2)
vis_dat(Observations_CPCOV10) + ggtitle("Missing Value Distribution")
ggplot(data = Observations_CPCOV11, aes(x=Period, y=Value)) + geom_boxplot(aes(fill=Label1), outlier.colour = "red")+
labs(title = paste("Uni-variable boxplots"))+
theme(axis.title.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank())
vaccin_adm<-Observations_CPCOV10[which(Observations_CPCOV10$Label1=="Cumulative vaccinations administered"),] #separate Cumulative vaccinations administered
d<-1:(nrow(vaccin_adm)*0.8)
train<-vaccin_adm[d,]
test<-vaccin_adm[-d,]
#order by date
train<-train[order(train$Period),]
test<-test[order(test$Period),]
library(e1071)
library(Metrics)
#train with hyperparameter tuning
tuneResultsvm <- tune(svm, Value ~ Period,  data = train, kernel = "polynomial",
ranges = list(gamma=2^(-1:1), epsilon = seq(0,1,0.1), cost = 2^(seq(0.5,10,.5))))
#tuneResultsvm <- svm(Value ~ Period,  data = train, kernel = "polynomial")
summary(tuneResultsvm$best.model)
#best model selection
tunedVals <-tuneResultsvm$best.model
#best parameters selection
tunePar<-tuneResultsvm$best.parameters
gammaBest<-tunePar$gamma
epsilonBest<-tunePar$epsilon
costBest<-tunePar$cost
#testing using the best model
predictYsvm <- predict(tunedVals, test)
library(Metrics)
#errors
RMSE_svm<-rmse(test$Value, predictYsvm)
MAE_svm<-mae(test$Value, predictYsvm)
RSE_svm<-1-rse(test$Value, predictYsvm)
#creating error table
Measurement<-c("RMSE", "R-squared", "MAE")
err_Value<-c(RMSE_svm, RSE_svm, MAE_svm)
employ.data <- data.frame(Measurement, err_Value)
employ.data
library(ggplot2)
ggplot(test, aes(x=Period, y = Value, group=Label1, colour=Label1)) +
geom_line() +
geom_point(aes(x=test$Period, y=predictYsvm),colour='blue')+
ggtitle("Cumulative vaccinations administered vs predicted - SVM")+
xlab("Week ending") +
ylab("Number of vaccinations administered")+
labs(fill = "1")+
theme(legend.position="top")
d_svm_test <- data.frame(test$Value, predictYsvm)
colnames(d_svm_test) <- c("obs", "pred")
range <- range(c(d_svm_test$obs, d_svm_test$pred), na.rm = TRUE)
plot(d_svm_test, xlim = range, ylim = range, main = "Predicted versus Observed for test data")
abline(a = 0, b = 1, col = c("blue"), lty = c(2), lwd = c(3))
